#!/bin/bash

# MyHealth Solution - Deploy na Azure Container Apps (FIXED)
set -e

echo "üöÄ Deployment MyHealth Solution na Azure (z poprawkƒÖ platformy)..."

# Zmienne konfiguracyjne
RESOURCE_GROUP="rg-myhealth-fixed"
LOCATION="East US"  # Dzia≈Ça!
CONTAINER_APP_ENV="myhealth-env"
REGISTRY_NAME="myhealthfixed$(date +%H%M)"
APP_NAME="myhealth"

echo "üìç Region: $LOCATION"
echo "üì¶ Resource Group: $RESOURCE_GROUP"
echo "üèóÔ∏è Registry: $REGISTRY_NAME"

# Sprawd≈∫ czy Azure CLI jest zalogowane
if ! az account show > /dev/null 2>&1; then
    echo "‚ùå Musisz siƒô zalogowaƒá do Azure CLI: az login"
    exit 1
fi

echo "‚úÖ Azure CLI zalogowane"

# 1. Usuwamy poprzedni test je≈õli istnieje
echo "üßπ Czyszczƒô poprzedni test..."
az group delete --name rg-myhealth-test --yes --no-wait 2>/dev/null || true

# 2. Tworzenie Resource Group
echo "üì¶ Tworzƒô Resource Group..."
az group create \
    --name $RESOURCE_GROUP \
    --location "$LOCATION"

# 3. Tworzenie Azure Container Registry
echo "üèóÔ∏è Tworzƒô Azure Container Registry..."
az acr create \
    --resource-group $RESOURCE_GROUP \
    --name $REGISTRY_NAME \
    --sku Basic \
    --admin-enabled true

# Pobierz credentials do ACR
ACR_SERVER=$(az acr show --name $REGISTRY_NAME --resource-group $RESOURCE_GROUP --query "loginServer" --output tsv)
ACR_USERNAME=$(az acr credential show --name $REGISTRY_NAME --resource-group $RESOURCE_GROUP --query "username" --output tsv)
ACR_PASSWORD=$(az acr credential show --name $REGISTRY_NAME --resource-group $RESOURCE_GROUP --query "passwords[0].value" --output tsv)

echo "üìã ACR Details:"
echo "Server: $ACR_SERVER"
echo "Username: $ACR_USERNAME"

# 4. Build i push images do ACR z poprawnƒÖ platformƒÖ
echo "üî® Budujƒô obrazy dla linux/amd64..."

# Login do ACR
az acr login --name $REGISTRY_NAME

echo "Building ML Model dla linux/amd64..."
docker buildx build --platform linux/amd64 -t $ACR_SERVER/ml-model:latest ./ml-model --push

echo "Building API dla linux/amd64..."
docker buildx build --platform linux/amd64 -t $ACR_SERVER/api:latest ./MyHealth.Api --push

echo "Building Frontend dla linux/amd64..."
docker buildx build --platform linux/amd64 -t $ACR_SERVER/frontend:latest ./health-frontend --push

# 5. Tworzenie Container Apps Environment
echo "üåç Tworzƒô Container Apps Environment..."
az containerapp env create \
    --name $CONTAINER_APP_ENV \
    --resource-group $RESOURCE_GROUP \
    --location "$LOCATION"

# 6. Deploy ML Model (FIRST!)
echo "ü§ñ Deployujƒô ML Model..."
az containerapp create \
    --name myhealth-ml-model \
    --resource-group $RESOURCE_GROUP \
    --environment $CONTAINER_APP_ENV \
    --image $ACR_SERVER/ml-model:latest \
    --registry-server $ACR_SERVER \
    --registry-username $ACR_USERNAME \
    --registry-password $ACR_PASSWORD \
    --target-port 5000 \
    --ingress internal \
    --memory 1.0Gi \
    --cpu 0.5

# Pobierz ML Model URL (internal FQDN)
echo "‚è≥ Czekam na URL ML modelu..."
sleep 30
ML_MODEL_URL=$(az containerapp show --name myhealth-ml-model --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" --output tsv)
echo "üîó ML Model URL: $ML_MODEL_URL"

# 7. Deploy API z poprawnym ML Model URL
echo "‚öôÔ∏è Deployujƒô API..."
az containerapp create \
    --name myhealth-api \
    --resource-group $RESOURCE_GROUP \
    --environment $CONTAINER_APP_ENV \
    --image $ACR_SERVER/api:latest \
    --registry-server $ACR_SERVER \
    --registry-username $ACR_USERNAME \
    --registry-password $ACR_PASSWORD \
    --target-port 80 \
    --ingress external \
    --memory 0.5Gi \
    --cpu 0.25 \
    --env-vars ASPNETCORE_ENVIRONMENT=Production ASPNETCORE_URLS=http://+:80 ML_MODEL_URL=https://$ML_MODEL_URL

# Pobierz URL API
echo "‚è≥ Czekam na URL API..."
sleep 30
API_URL=$(az containerapp show --name myhealth-api --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" --output tsv)
echo "üîó API URL: $API_URL"

# 8. Deploy Frontend z prawid≈Çowym API URL
echo "üåê Deployujƒô Frontend..."
az containerapp create \
    --name myhealth-frontend \
    --resource-group $RESOURCE_GROUP \
    --environment $CONTAINER_APP_ENV \
    --image $ACR_SERVER/frontend:latest \
    --registry-server $ACR_SERVER \
    --registry-username $ACR_USERNAME \
    --registry-password $ACR_PASSWORD \
    --target-port 3000 \
    --ingress external \
    --memory 0.5Gi \
    --cpu 0.25 \
    --env-vars NODE_ENV=production NEXT_PUBLIC_API_URL=https://$API_URL/api/health/assess-simple

# 9. Poka≈º wyniki
echo ""
echo "üéâ DEPLOYMENT ZAKO≈ÉCZONY POMY≈öLNIE!"
echo ""
echo "üìã URLs aplikacji:"
FRONTEND_URL=$(az containerapp show --name myhealth-frontend --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" --output tsv)
echo "üåê Frontend: https://$FRONTEND_URL"
echo "‚öôÔ∏è API: https://$API_URL"
echo "ü§ñ ML Model: https://$ML_MODEL_URL (internal)"
echo ""
echo "üîó G≈Å√ìWNY URL APLIKACJI: https://$FRONTEND_URL"
echo ""
echo "üí° Sprawd≈∫ logi:"
echo "az containerapp logs show --name myhealth-frontend --resource-group $RESOURCE_GROUP"
echo "az containerapp logs show --name myhealth-api --resource-group $RESOURCE_GROUP"
echo "az containerapp logs show --name myhealth-ml-model --resource-group $RESOURCE_GROUP"
echo ""
echo "üí∞ Szacowane koszty: ~$20-50/miesiƒÖc"
echo ""
echo "üõ†Ô∏è ZarzƒÖdzanie:"
echo "Portal Azure: https://portal.azure.com"
echo "Resource Group: $RESOURCE_GROUP"
echo ""
echo "üóëÔ∏è Aby usunƒÖƒá wszystko:"
echo "az group delete --name $RESOURCE_GROUP --yes --no-wait" 