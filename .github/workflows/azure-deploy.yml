name: Deploy to Azure Container Apps

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  RESOURCE_GROUP: rg-myhealth-fixed
  REGISTRY_NAME: myhealthfixed1637
  CONTAINER_APP_ENV: myhealth-env

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      api: ${{ steps.changes.outputs.api }}
      ml-model: ${{ steps.changes.outputs.ml-model }}
      commit-sha: ${{ steps.commit-info.outputs.sha }}
      commit-message: ${{ steps.commit-info.outputs.message }}
      force-api-deploy: ${{ steps.check-critical.outputs.force-api }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Pobierz pe≈ÇnƒÖ historiƒô ≈ºeby paths-filter dzia≈Ça≈Ç poprawnie

      - name: Get commit info
        id: commit-info
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
          echo "üîç Current commit: $(git rev-parse HEAD)"
          echo "üìù Commit message: $(git log -1 --pretty=%B)"

      - name: Check for critical fixes
        id: check-critical
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"Fix"* ]] || [[ "$COMMIT_MSG" == *"NullReference"* ]] || [[ "$COMMIT_MSG" == *"Exception"* ]] || [[ "$COMMIT_MSG" == *"fix"* ]]; then
            echo "üö® Critical fix detected in commit message - forcing API deployment"
            echo "force-api=true" >> $GITHUB_OUTPUT
          else
            echo "force-api=false" >> $GITHUB_OUTPUT
          fi

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'health-frontend/**'
            api:
              - 'MyHealth.Api/**'
            ml-model:
              - 'ml-model/**'

  deploy-ml-model:
    needs: detect-changes
    if: needs.detect-changes.outputs.ml-model == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify commit
        run: |
          echo "üîç Deploying ML Model from commit: $(git rev-parse HEAD)"
          echo "üìù Commit message: $(git log -1 --pretty=%B)"

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: az acr login --name ${{ env.REGISTRY_NAME }}

      - name: Build and push ML Model
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          COMMIT_SHA=$(git rev-parse --short HEAD)
          ACR_SERVER=$(az acr show --name ${{ env.REGISTRY_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "loginServer" --output tsv)

          echo "üèóÔ∏è Building ML Model with tag: $TIMESTAMP-$COMMIT_SHA"
          docker build -t $ACR_SERVER/ml-model:$TIMESTAMP-$COMMIT_SHA ./ml-model
          docker push $ACR_SERVER/ml-model:$TIMESTAMP-$COMMIT_SHA

          echo "üöÄ Updating ML Model container app"
          az containerapp update \
            --name myhealth-ml-model \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image $ACR_SERVER/ml-model:$TIMESTAMP-$COMMIT_SHA

  deploy-api:
    needs: [detect-changes, deploy-ml-model]
    if: always() && (needs.detect-changes.outputs.api == 'true' || needs.detect-changes.outputs.force-api-deploy == 'true' || needs.deploy-ml-model.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify commit
        run: |
          echo "üîç Deploying API from commit: $(git rev-parse HEAD)"
          echo "üìù Commit message: $(git log -1 --pretty=%B)"
          echo "üîß This should include NullReferenceException fixes from commit ecc4f37"

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: az acr login --name ${{ env.REGISTRY_NAME }}

      - name: Build and push API
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          COMMIT_SHA=$(git rev-parse --short HEAD)
          ACR_SERVER=$(az acr show --name ${{ env.REGISTRY_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "loginServer" --output tsv)

          echo "üèóÔ∏è Building API with tag: $TIMESTAMP-$COMMIT_SHA"
          docker build -t $ACR_SERVER/api:$TIMESTAMP-$COMMIT_SHA ./MyHealth.Api
          docker push $ACR_SERVER/api:$TIMESTAMP-$COMMIT_SHA

          # Pobierz ML Model URL
          ML_MODEL_URL=$(az containerapp show --name myhealth-ml-model --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" --output tsv)

          echo "üöÄ Updating API container app with ML_MODEL_URL=https://$ML_MODEL_URL"
          az containerapp update \
            --name myhealth-api \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image $ACR_SERVER/api:$TIMESTAMP-$COMMIT_SHA \
            --set-env-vars ML_MODEL_URL=https://$ML_MODEL_URL

  deploy-frontend:
    needs: [detect-changes, deploy-api]
    if: always() && (needs.detect-changes.outputs.frontend == 'true' || needs.deploy-api.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify commit
        run: |
          echo "üîç Deploying Frontend from commit: $(git rev-parse HEAD)"
          echo "üìù Commit message: $(git log -1 --pretty=%B)"

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: az acr login --name ${{ env.REGISTRY_NAME }}

      - name: Build and push Frontend
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          COMMIT_SHA=$(git rev-parse --short HEAD)
          ACR_SERVER=$(az acr show --name ${{ env.REGISTRY_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "loginServer" --output tsv)

          echo "üèóÔ∏è Building Frontend with tag: $TIMESTAMP-$COMMIT_SHA"
          docker build -t $ACR_SERVER/frontend:$TIMESTAMP-$COMMIT_SHA ./health-frontend
          docker push $ACR_SERVER/frontend:$TIMESTAMP-$COMMIT_SHA

          # Pobierz API URL
          API_URL=$(az containerapp show --name myhealth-api --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" --output tsv)

          echo "üöÄ Updating Frontend container app with API_URL=https://$API_URL/api/health/assess-advanced"
          az containerapp update \
            --name myhealth-frontend \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image $ACR_SERVER/frontend:$TIMESTAMP-$COMMIT_SHA \
            --set-env-vars NEXT_PUBLIC_API_URL=https://$API_URL/api/health/assess-advanced

  notify-success:
    needs: [detect-changes, deploy-ml-model, deploy-api, deploy-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get deployment info
        if: needs.deploy-frontend.result == 'success' || needs.deploy-api.result == 'success'
        run: |
          FRONTEND_URL=$(az containerapp show --name myhealth-frontend --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" --output tsv)
          echo "üéâ Deployment completed!"
          echo "üîç Deployed commit: ${{ needs.detect-changes.outputs.commit-sha }}"
          echo "üìù Commit message: ${{ needs.detect-changes.outputs.commit-message }}"
          echo "üåê Application URL: https://$FRONTEND_URL"
          echo ""
          echo "üìä Deployment status:"
          echo "  ML Model: ${{ needs.deploy-ml-model.result }}"
          echo "  API: ${{ needs.deploy-api.result }}"
          echo "  Frontend: ${{ needs.deploy-frontend.result }}"
